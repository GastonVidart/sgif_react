[{"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\index.js":"1","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Footer.js":"2","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Menu.js":"3","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\App.js":"4","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Header.js":"5","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\reportWebVitals.js":"6","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Sacramento.js":"7","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\FormularioAlumno.js":"8","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\FormularioResponsable.js":"9","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Home.js":"10","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\InscribirAlumno.js":"11","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\CompletarFamilia.js":"12","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\NotasTrimestrales.js":"13","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\AltaCurso.js":"14","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Alerts.js":"15","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\FormDialogAltaCurso.js":"16","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\TableDictados.js":"17","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\utils\\Errores.js":"18","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Alerta.js":"19"},{"size":517,"mtime":1606479163149,"results":"20","hashOfConfig":"21"},{"size":260,"mtime":1611178187818,"results":"22","hashOfConfig":"21"},{"size":4095,"mtime":1611178187878,"results":"23","hashOfConfig":"21"},{"size":1464,"mtime":1611178187773,"results":"24","hashOfConfig":"21"},{"size":2239,"mtime":1611178187868,"results":"25","hashOfConfig":"21"},{"size":375,"mtime":1606479163151,"results":"26","hashOfConfig":"21"},{"size":2505,"mtime":1611178187878,"results":"27","hashOfConfig":"21"},{"size":25064,"mtime":1611871083785,"results":"28","hashOfConfig":"21"},{"size":28645,"mtime":1611870830425,"results":"29","hashOfConfig":"21"},{"size":713,"mtime":1611178187868,"results":"30","hashOfConfig":"21"},{"size":42351,"mtime":1611874174306,"results":"31","hashOfConfig":"21"},{"size":633,"mtime":1611178187818,"results":"32","hashOfConfig":"21"},{"size":635,"mtime":1611178187878,"results":"33","hashOfConfig":"21"},{"size":7947,"mtime":1608236785864,"results":"34","hashOfConfig":"21"},{"size":1466,"mtime":1611870876713,"results":"35","hashOfConfig":"21"},{"size":11116,"mtime":1611178187838,"results":"36","hashOfConfig":"21"},{"size":3950,"mtime":1611178187902,"results":"37","hashOfConfig":"21"},{"size":1083,"mtime":1611672997281,"results":"38","hashOfConfig":"21"},{"size":2354,"mtime":1611874194352,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"va329a",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\index.js",[],["90","91"],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Footer.js",["92"],"import React, { Component } from \"react\";\r\n\r\n\r\nclass Footer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n           <footer>Pie de Pagina</footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;",["93","94"],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Menu.js",[],["95","96"],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\App.js",["97"],"import React, { Component } from \"react\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport Menu from './components/Menu';\r\nimport Header from './components/Header';\r\n\r\nimport Home from './components/Home';\r\nimport InscribirAlumno from './components/InscribirAlumno';\r\nimport CompletarFamilia from './components/CompletarFamilia';\r\nimport NotasTrimestrales from './components/NotasTrimestrales';\r\nimport AltaCurso from './components/AltaCurso';\r\n\r\nimport Footer from './components/Footer';\r\n\r\nimport './css/main.css'\r\n\r\nconst Route = require('react-router-dom').Route;\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Header />\r\n                <div className=\"row no-gutters contPpal\">\r\n                    <BrowserRouter>\r\n                        <Menu />\r\n                        <Route exact path=\"/\" component={Home} />\r\n                        <Route exact path=\"/inscribir-alumno\" component={InscribirAlumno} />\r\n                        <Route exact path=\"/completar-familia\" component={CompletarFamilia} />\r\n                        <Route exact path=\"/notas-trimestrales\" component={NotasTrimestrales} />\r\n                        <Route exact path=\"/alta-curso\" component={AltaCurso} />\r\n                    </BrowserRouter>                    \r\n                </div>\r\n                {/*<Footer />*/}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;",["98","99"],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Header.js",[],["100","101"],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Sacramento.js",[],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\FormularioAlumno.js",[],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\FormularioResponsable.js",[],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Home.js",[],["102","103"],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\InscribirAlumno.js",["104","105"],"import React, { Component } from \"react\";\r\n\r\nimport '../css/formulario.css';\r\nimport FormularioAlumno from \"./FormularioAlumno\";\r\nimport FormularioResponsable from \"./FormularioResponsable\";\r\nimport { NoExisteResponsable, NoExistePersona, BadRequest } from \"../utils/Errores\";\r\n\r\nclass InscribirAlumno extends React.Component {\r\n    //Componente principal para formulario con multiples partes\r\n    //Contiene el estado y funciones que se comparten entre las partes del mismo\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            paso0: {\r\n                inputs: {\r\n                    dni: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese un DNI\",\r\n                        habilitado: true\r\n                    },\r\n                    tipoDni: {\r\n                        valor: 'DNI',\r\n                        valido: true,\r\n                        msjError: \"Seleccione un Tipo de DNI\",\r\n                        habilitado: true\r\n                    },\r\n                    nombre: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese el nombre\",\r\n                        habilitado: false\r\n                    },\r\n                    apellido: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese el apellido\",\r\n                        habilitado: false\r\n                    },\r\n                    genero: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Seleccione un género\",\r\n                        habilitado: false\r\n                    },\r\n                    email: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese un email\",\r\n                        habilitado: false\r\n                    },\r\n                    fechaNacimiento: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese la Fecha de Nacimiento\",\r\n                        habilitado: false\r\n                    },\r\n                    lugarNacimiento: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese el Lugar de Nacimiento\",\r\n                        habilitado: false\r\n                    },\r\n                    legajo: {\r\n                        valor: '',\r\n                        valido: true,\r\n                        msjError: \"Implementar\",\r\n                        habilitado: false\r\n                    },\r\n                    fechaIngreso: {\r\n                        valor: this.fechaDefault(),\r\n                        valido: true,\r\n                        msjError: \"Fecha de Ingreso Inválida\",\r\n                        habilitado: false\r\n                    },\r\n                    fechaEgreso: {\r\n                        valor: '',\r\n                        valido: true,\r\n                        msjError: \"Fecha de Ingreso Inválida\",\r\n                        habilitado: false\r\n                    },\r\n                    nombreEscuelaAnt: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese el Nombre de la Escuela\",\r\n                        habilitado: false\r\n                    },\r\n                    //sacramento: [], //TODO: ver lo del sacramento\r\n                    foto: {\r\n                        valor: null,\r\n                        valido: true,\r\n                        msjError: \"Foto Incorrecta\",\r\n                        habilitado: false\r\n                    },\r\n                    anioCorrespondiente: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese un Año de Inscripción\",\r\n                        habilitado: false\r\n                    },\r\n                    estadoInscripcion: {\r\n                        valor: '',\r\n                        valido: true,\r\n                        msjError: \"Estado Inscripción Inválido\",\r\n                        habilitado: false\r\n                    } //TODO: se muestra en un flotante cuando se hace el get por dni                    \r\n                },\r\n                oidAlumno: '',\r\n                oidPersona: '',\r\n                existeAlumno: false,\r\n                alumnoCompleto: true, //Define si se esta creando un alumno por completo, o solo el rol\r\n                nombreFoto: 'Subir Foto Alumno',\r\n                validar: false,\r\n                requeridos: [\"dni\", \"nombre\", \"apellido\", \"genero\", \"email\", \"fechaNacimiento\", \"lugarNacimiento\", \"nombreEscuelaAnt\", \"anioCorrespondiente\"],\r\n                spinner: false\r\n            },\r\n\r\n            paso1: {\r\n                inputs: {\r\n                    dni: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese un DNI\",\r\n                        habilitado: true\r\n                    },\r\n                    nombre: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese el nombre\",\r\n                        habilitado: false\r\n                    },\r\n                    apellido: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese el apellido\",\r\n                        habilitado: false\r\n                    },\r\n                    genero: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Seleccione un género\",\r\n                        habilitado: false\r\n                    },\r\n                    fechaNacimiento: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese la Fecha de Nacimiento\",\r\n                        habilitado: false\r\n                    },\r\n                    lugarNacimiento: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese el Lugar de Nacimiento\",\r\n                        habilitado: false\r\n                    },\r\n                    legajo: {\r\n                        valor: '',\r\n                        valido: true,\r\n                        msjError: \"Implementar\",\r\n                        habilitado: false\r\n                    }, //TODO: agregar a formulario                    \r\n                    cuitCuil: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese un CUIL/CUIT\",\r\n                        habilitado: false\r\n                    },\r\n                    telefono: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese un Teléfono\",\r\n                        habilitado: false\r\n                    },\r\n                    email: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese un Email\",\r\n                        habilitado: false\r\n                    },\r\n                    calle: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese una Calle\",\r\n                        habilitado: false\r\n                    },\r\n                    altura: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese una Altura\",\r\n                        habilitado: false\r\n                    },\r\n                    barrio: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese un Barrio\",\r\n                        habilitado: false\r\n                    },\r\n                    piso: {\r\n                        valor: '',\r\n                        valido: true,\r\n                        msjError: \"Piso Inválido\",\r\n                        habilitado: false\r\n                    },\r\n                    depto: {\r\n                        valor: '',\r\n                        valido: true,\r\n                        msjError: \"Dpto Inválido\",\r\n                        habilitado: false\r\n                    },\r\n                    tira: {\r\n                        valor: '',\r\n                        valido: true,\r\n                        msjError: \"Tira Inválida\",\r\n                        habilitado: false\r\n                    },\r\n                    modulo: {\r\n                        valor: '',\r\n                        valido: true,\r\n                        msjError: \"Módulo Iválido\",\r\n                        habilitado: false\r\n                    },\r\n                    localidad: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese una Localidad\",\r\n                        habilitado: false\r\n                    },\r\n                    provincia: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese una Provincia\",\r\n                        habilitado: false\r\n                    },\r\n                    codigoPostal: {\r\n                        valor: '',\r\n                        valido: false,\r\n                        msjError: \"Ingrese un Código Postal\",\r\n                        habilitado: false\r\n                    }\r\n                },\r\n                oidPersona: '',\r\n                oidResponsable: '',\r\n                responsableCompleto: true,\r\n                existeResponsable: false,\r\n                validar: false,\r\n                requeridos: [\"dni\", \"cuitCuil\", \"nombre\", \"apellido\", \"genero\", \"email\", \"telefono\",\r\n                    \"fechaNacimiento\", \"lugarNacimiento\", \"calle\", \"altura\", \"barrio\", \"localidad\", \"provincia\", \"codigoPostal\"],\r\n                spinner: false\r\n            },\r\n            cantPasos: 2,\r\n            pasoActual: 0,\r\n        };\r\n\r\n        this.handleChangeAlumno = this.handleChangeAlumno.bind(this);\r\n        this.handleChangeResponsable = this.handleChangeResponsable.bind(this);\r\n        this.pasoSiguiente = this.pasoSiguiente.bind(this);\r\n        this.pasoPrevio = this.pasoPrevio.bind(this);\r\n        this.registrar = this.registrar.bind(this);\r\n    }\r\n\r\n    //Cambio el estado segun el input que se haya modificado.\r\n    handleChangeAlumno(event) {\r\n        let valido;\r\n        const target = event.target;\r\n        const { id, value, type } = target;\r\n\r\n        console.log(\"Alumno id target\", id);\r\n\r\n        valido = this.validarCampo(target);\r\n\r\n        //Cambio de estado diferente\r\n        if (id === \"fotoAlumno\") {\r\n            const archivo = target.files[0];\r\n            if (archivo !== undefined) {\r\n                this.setState(estadoPrevio => ({\r\n                    paso0: {\r\n                        ...estadoPrevio.paso0,\r\n                        inputs: {\r\n                            ...estadoPrevio.paso0.inputs,\r\n                            \"foto\": {\r\n                                ...estadoPrevio.paso0.inputs.foto,\r\n                                valor: URL.createObjectURL(archivo),\r\n                                valido: valido\r\n                            }\r\n                        },\r\n                        nombreFoto: archivo.name\r\n                    }\r\n                }));\r\n            }\r\n        } else {\r\n            const data = type === 'checkbox' ? target.checked : value;\r\n\r\n            this.setState(estadoPrevio => ({\r\n                paso0: {\r\n                    ...estadoPrevio.paso0,\r\n                    inputs: {\r\n                        ...estadoPrevio.paso0.inputs,\r\n                        [id]: {\r\n                            ...estadoPrevio.paso0.inputs[id],\r\n                            valor: data,\r\n                            valido: valido\r\n                        }\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n        return;\r\n    }\r\n\r\n    handleChangeResponsable(event) {\r\n        let valido;\r\n        const target = event.target;\r\n        const { id, value, type } = target;\r\n\r\n        console.log(\"Responsable id target\", id);\r\n\r\n        valido = this.validarCampo(target);\r\n\r\n        const data = target.type === 'checkbox' ? target.checked : value;\r\n\r\n        this.setState(estadoPrevio => ({\r\n            paso1: {\r\n                ...estadoPrevio.paso1,\r\n                inputs: {\r\n                    ...estadoPrevio.paso1.inputs,\r\n                    [id]: {\r\n                        ...estadoPrevio.paso1.inputs[id],\r\n                        valor: data,\r\n                        valido: valido\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n    }\r\n\r\n    validarCampo(target) {\r\n        const { id } = target;\r\n        let validoAux = true;\r\n        let validoHTML = target.checkValidity();\r\n\r\n        if (validoHTML) {\r\n            //Validación específica por campo\r\n            //En cada case se debería cambiar el valor de validoAux, para condiciones adicionales\r\n            switch (id) {\r\n                case \"dni\":\r\n                    //console.log(\"dni\");\r\n                    break;\r\n                case \"fotoAlumno\":\r\n                    //console.log(\"fotoAlumno\");\r\n                    break;\r\n                case \"anioCorrespondiente\":\r\n                    //console.log(\"anioCorresp\");\r\n                    break;\r\n                default:\r\n                    //console.log(\"default\");\r\n                    break;\r\n            }\r\n        }\r\n        return validoAux && validoHTML;\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const { alumno, responsable } = this.state;\r\n        alert(`Datos Ingresados \\n\r\n            Alumno: ${alumno} \\n \r\n            Responsable: ${responsable}`)\r\n        console.error(\"Implementar\")\r\n    }\r\n\r\n    registrar() {\r\n        const estado = this.state;\r\n        let exito = Promise.resolve(false);\r\n\r\n        console.log(\"Finaliza Registro\");\r\n\r\n        const existeAlumno = estado.paso0.existeAlumno;\r\n        const alumnoCompleto = estado.paso0.alumnoCompleto;\r\n        const existeResponsable = estado.paso1.existeResponsable;\r\n        const responsableCompleto = estado.paso1.responsableCompleto;\r\n        let idResponsable;\r\n\r\n        if (!existeAlumno) {\r\n            //TODO: si existe ver que se hace con el responsable, si solo se muestra y listo                \r\n            if (!existeResponsable) {\r\n\r\n                //Tanto si es responsable completo como rol, se crea de la misma manera\r\n                console.log(\"Crea Responsable\", responsableCompleto ? 'Completo' : 'Rol')\r\n                idResponsable = this.crearResponsable(estado, responsableCompleto)\r\n\r\n            } else if (existeResponsable) {\r\n                console.log(\"El responsable existe\")\r\n                idResponsable = Promise.resolve(estado.paso1.oidResponsable)\r\n            }\r\n\r\n            //Tanto si es alumno completo, como alumno rol, se crea de la misma manera\r\n            console.log(\"Crea Alumno\", alumnoCompleto ? 'Completo' : 'Rol');\r\n            exito = idResponsable.then(idResp => {\r\n                console.log(\"Id Responsable: \", idResp);\r\n                return this.crearAlumno(estado, alumnoCompleto, idResp)\r\n                    .then(data => {\r\n                        //TODO: notif lo que dice abajo\r\n                        console.log(\"Inscripción Exitosa!\", data)\r\n                        return true;\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(\"Error Inscribir Alumno: \", err)\r\n                        return false;\r\n                    })\r\n\r\n            }).catch(err => {\r\n                console.log(\"ERROR: \", err)\r\n                throw new Error(err.message);\r\n            })\r\n\r\n            return exito;\r\n\r\n        } else {\r\n            console.log(\"El alumno existe, se reinscribe\")\r\n            //TODO: reinscribir, que llame al endpoint que lo hace\r\n            //TODO: para el otro componente, mandar un flag de si es solo la transac o parte de reinscr\r\n            //TODO: en la reinscr solo tiene que estar disponible el nuevo año a inscribir y que sea mayor o igual al que ya tiene\r\n            //TODO: que devuelva true despues de reinscr asi cambia de pantalla y notifique tmb            \r\n            return exito;\r\n        }\r\n    }\r\n\r\n    async crearAlumno(estadoPrevio, esCompleto, oidResponsable) {\r\n        const urlBase = 'http://localhost:5000/insc-alumno';\r\n        const urlCompleto = '/alumno';\r\n        const urlRol = '/alumno/persona/';\r\n        let url;\r\n        let metodo = 'PUT';\r\n\r\n        //TODO: sacramentos, no esta modelado aca y otros\r\n        var datos = {\r\n            oidResponsable,\r\n            alumno: {\r\n                tipoDni: estadoPrevio.paso0.inputs.tipoDni.valor,\r\n                fechaNacimiento: estadoPrevio.paso0.inputs.fechaNacimiento.valor,\r\n                lugarNacimiento: estadoPrevio.paso0.inputs.lugarNacimiento.valor,\r\n                email: estadoPrevio.paso0.inputs.email.valor,\r\n                fechaIngreso: estadoPrevio.paso0.inputs.fechaIngreso.valor,\r\n                fechaEgreso: estadoPrevio.paso0.inputs.fechaEgreso.valor,\r\n                nombreEscuelaAnt: estadoPrevio.paso0.inputs.nombreEscuelaAnt.valor,\r\n                anioCorrespondiente: estadoPrevio.paso0.inputs.anioCorrespondiente.valor\r\n            }\r\n        }\r\n\r\n        if (esCompleto) {\r\n            url = urlBase + urlCompleto;\r\n            metodo = 'POST';\r\n            const persona = {\r\n                alumno: {\r\n                    dni: estadoPrevio.paso0.inputs.dni.valor,\r\n                    nombre: estadoPrevio.paso0.inputs.nombre.valor,\r\n                    apellido: estadoPrevio.paso0.inputs.apellido.valor,\r\n                    genero: estadoPrevio.paso0.inputs.genero.valor\r\n                }\r\n            }\r\n            Object.assign(datos.alumno, persona.alumno);\r\n        } else {\r\n            url = urlBase + urlRol + estadoPrevio.paso0.oidPersona\r\n        }\r\n        console.log(\"datos a enviar\", datos)\r\n\r\n        const idAlumno = await fetch(url, {\r\n            method: metodo,\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(datos),\r\n        }).then(response => {\r\n            //Si es necesario se pueden agregar errores personalizados segun el tipo de creacion\r\n            return response.json().then(data => {\r\n                if (response.status === 500) {\r\n                    throw new Error(data.message);\r\n                } else if (response.status === 404) {\r\n                    throw new NoExisteResponsable(data.message);\r\n                } else if (response.status === 400) {\r\n                    throw new BadRequest(data.message);\r\n                }\r\n                return data;\r\n            })\r\n        }).then(data => {\r\n            console.log(\"Respuesta Creación Alumno \", esCompleto ? 'Completo' : 'Rol', data.response)\r\n            if (data.response.alumno.hasOwnProperty(\"_id\")) {\r\n                return data.response.alumno._id;\r\n            } else {\r\n                throw new Error(\"Crear alumno respondio sin oid\");\r\n            }\r\n        })\r\n        return idAlumno\r\n    }\r\n\r\n    async crearResponsable(estadoPrevio, esCompleto) {\r\n        let idResponsable;\r\n        const urlBase = 'http://localhost:5000/insc-alumno';\r\n        const urlCompleto = '/responsable';\r\n        const urlRol = '/responsable/persona/';\r\n        let url;\r\n        let metodo = 'PUT';\r\n        let datos = {\r\n            responsable: {\r\n                cuitCuil: estadoPrevio.paso1.inputs.cuitCuil.valor,\r\n                telefono: estadoPrevio.paso1.inputs.telefono.valor,\r\n                email: estadoPrevio.paso1.inputs.email.valor,\r\n                fechaNacimiento: estadoPrevio.paso1.inputs.fechaNacimiento.valor,\r\n                lugarNacimiento: estadoPrevio.paso1.inputs.lugarNacimiento.valor,\r\n                calle: estadoPrevio.paso1.inputs.calle.valor,\r\n                altura: estadoPrevio.paso1.inputs.altura.valor,\r\n                barrio: estadoPrevio.paso1.inputs.barrio.valor,\r\n                piso: estadoPrevio.paso1.inputs.piso.valor,\r\n                depto: estadoPrevio.paso1.inputs.depto.valor,\r\n                tira: estadoPrevio.paso1.inputs.tira.valor,\r\n                modulo: estadoPrevio.paso1.inputs.modulo.valor,\r\n                localidad: estadoPrevio.paso1.inputs.localidad.valor,\r\n                codigoPostal: estadoPrevio.paso1.inputs.codigoPostal.valor,\r\n                provincia: estadoPrevio.paso1.inputs.provincia.valor,\r\n            }\r\n        }\r\n\r\n        if (esCompleto) {\r\n            url = urlBase + urlCompleto;\r\n            metodo = 'POST';\r\n            const persona = {\r\n                responsable: {\r\n                    dni: estadoPrevio.paso1.inputs.dni.valor,\r\n                    nombre: estadoPrevio.paso1.inputs.nombre.valor,\r\n                    apellido: estadoPrevio.paso1.inputs.apellido.valor,\r\n                    genero: estadoPrevio.paso1.inputs.genero.valor,\r\n                }\r\n            }\r\n            Object.assign(datos.responsable, persona.responsable);\r\n        } else {\r\n            url = urlBase + urlRol + estadoPrevio.paso1.oidPersona\r\n        }\r\n\r\n        idResponsable = await fetch(url, {\r\n            method: metodo,\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(datos)\r\n        })\r\n            .then(response => {\r\n                //Si es necesario se pueden agregar errores personalizados segun el tipo de creacion\r\n                return response.json().then(data => {\r\n                    if (response.status === 400) {\r\n                        throw new BadRequest(data.message);\r\n                    } else if (response.status === 404) {\r\n                        throw new NoExistePersona(data.message)\r\n                    } else if (response.status === 500) {\r\n                        throw new Error(data.message)\r\n                    }\r\n                    return data;\r\n                });\r\n            })\r\n            .then(data => {\r\n                console.log(\"Respuesta Creación Responsable \", esCompleto ? 'Completo' : 'Rol', data)\r\n                if (data.response.hasOwnProperty(\"_id\")) {\r\n                    return data.response._id;\r\n                } else {\r\n                    throw new Error(\"Crear responsable respondio sin oid\");\r\n                }\r\n            })\r\n        return idResponsable;\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {/*TODO: validar fecha inscripcion*/}\r\n                <FormularioAlumno\r\n                    pasoActual={this.state.pasoActual}\r\n                    handleInputChange={this.handleChangeAlumno}\r\n                    formulario={this.state.paso0}\r\n                    searchAlumno={this.searchAlumno}\r\n                    pasoSiguiente={() => this.pasoSiguiente()}\r\n                />\r\n\r\n                <FormularioResponsable\r\n                    pasoActual={this.state.pasoActual}\r\n                    handleInputChange={this.handleChangeResponsable}\r\n                    formulario={this.state.paso1}\r\n                    searchResponsable={this.searchResponsable}\r\n                    pasoSiguiente={() => this.pasoSiguiente()}\r\n                    pasoPrevio={() => this.pasoPrevio()}\r\n                    registrar={this.registrar}\r\n                />\r\n                {/*TODO: mostrar notifs*/}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    searchResponsable = async () => {\r\n        const dniResp = this.state.paso1.inputs.dni.valor;\r\n        console.log(\"dniResp\", dniResp);\r\n\r\n        if (dniResp === '') {\r\n            //TODO: notif\r\n            console.log(\"Dni Responsable Vacío\")\r\n            return\r\n        }\r\n\r\n        fetch('http://localhost:5000/insc-alumno/responsable/' + dniResp)\r\n            .then(response => {\r\n                //TODO: manejo de estados de error aca https://developer.mozilla.org/es/docs/Web/API/Response/status\r\n                //TODO: cuando no tiene conexión loading https://getbootstrap.com/docs/4.5/components/spinners/\r\n                return response.json().then(data => {\r\n                    console.log(\"Status Search Responsable\", response.status)\r\n                    if (response.status === 404) {\r\n                        throw new NoExisteResponsable(data.message);\r\n                    } else if (response.status === 500) {\r\n                        throw new Error(data.message);\r\n                    }\r\n                    return data\r\n                })\r\n            })\r\n            .then(data => {\r\n                console.log(\"Responsable Encontrado \", data);\r\n                const datos = data.responsable;\r\n                this.setState(function (state) {\r\n                    const inputs = { ...state.paso1.inputs };\r\n                    Object.assign(inputs, this.extraeDatosResponsable(state, datos));\r\n                    return {\r\n                        paso1: {\r\n                            ...state.paso1,\r\n                            inputs,\r\n                            existeResponsable: true,\r\n                            oidResponsable: data.responsable._id\r\n                        }\r\n                    };\r\n                })\r\n            })\r\n            .catch(err => {\r\n                if (err instanceof NoExisteResponsable) {\r\n                    console.error(\"Responsable: \", err)\r\n                    //TODO: llevar a una func\r\n                    fetch('http://localhost:5000/insc-alumno/persona/' + dniResp)\r\n                        .then(response => {\r\n                            console.log(response)\r\n                            return response.json().then(data => {\r\n                                console.log(\"Status Search Persona Responsable\", response.status)\r\n                                if (response.status === 404) {\r\n                                    throw new NoExistePersona(data.message);\r\n                                } else if (response.status === 500) {\r\n                                    throw new Error(data.message);\r\n                                }\r\n                                return data;\r\n                            })\r\n                            //TODO: notif\r\n                        }).then(data => {\r\n                            console.log(\"Persona Encontrada \", data)\r\n                            const datos = data.persona;\r\n                            this.setState(function (state) {\r\n                                const inputs = { ...state.paso1.inputs };\r\n                                Object.assign(inputs, this.reiniciarFormulario(state));\r\n                                Object.assign(inputs, this.extraeDatosPersona(state, datos));\r\n                                return {\r\n                                    paso1: {\r\n                                        ...state.paso1,\r\n                                        inputs,\r\n                                        oidPersona: datos._id,\r\n                                        responsableCompleto: false,\r\n                                        existeResponsable: false\r\n                                    }\r\n                                };\r\n                            })\r\n                            //TODO: notif\r\n                            console.log(\"id Persona\", this.state.paso1.oidPersona)\r\n                        })\r\n                        .catch(error => {\r\n                            if (error instanceof NoExistePersona) {\r\n                                //console.error(\"Responsable - Persona: \", error)\r\n                                console.log(\"Puede crear un responsable nuevo\")\r\n                                this.setState(state => {\r\n                                    const inputs = { ...state.paso1.inputs };\r\n                                    Object.assign(inputs, this.reiniciarFormulario(state));\r\n                                    return {\r\n                                        paso1: {\r\n                                            ...state.paso1,\r\n                                            inputs,\r\n                                            responsableCompleto: true,\r\n                                            existeResponsable: false\r\n                                        }\r\n                                    }\r\n                                })\r\n                                //TODO: notif\r\n                            } else {\r\n                                console.log(\"Error Buscar Responsable: \", error)\r\n                            }\r\n                        })\r\n                } else {\r\n                    console.error(\"Error: \", err)\r\n                }\r\n            })\r\n    }\r\n\r\n    searchAlumno = async () => {\r\n        const dniAlumno = this.state.paso0.inputs.dni.valor;\r\n        console.log(\"dniAlum\", dniAlumno);\r\n        if (dniAlumno === '') {\r\n            //TODO: notif\r\n            console.log(\"Dni Alumno Vacío\")\r\n            return\r\n        }\r\n\r\n        //this.toggleSpinner();\r\n\r\n        fetch('http://localhost:5000/insc-alumno/alumno/' + dniAlumno)\r\n            .then(response => {\r\n                return response.json().then(data => {\r\n                    console.log(\"Status Search Alumno\", response.status)\r\n                    if (response.status === 500) {\r\n                        throw new Error(data.message);\r\n                    }\r\n                    return data;\r\n                })\r\n            })\r\n            .then(data => {\r\n                console.log(\"Respuesta Búsqueda Alumno:\", data);\r\n                const datos = data.response.alumnoDB;\r\n                const valida = data.response.valido;\r\n                const { operacion, message } = data.response\r\n\r\n                if (valida) {\r\n                    if (data.response.operacion === \"Reinscribir\") {\r\n                        this.setState(function (state) {\r\n                            console.log(\"Alumno encontrado. Operacion: \", operacion);\r\n                            const inputs = { ...state.paso0.inputs };\r\n                            Object.assign(inputs, this.extraeDatosAlumno(state, datos));\r\n                            return {\r\n                                paso0: {\r\n                                    ...state.paso0,\r\n                                    inputs,\r\n                                    existeAlumno: true,\r\n                                    oidAlumno: datos._id\r\n                                }\r\n                            };\r\n                        })\r\n                        console.log(\"oid Alumno\", this.state.paso0.oidAlumno)\r\n                        //TODO: buscar responsable y mostrarlo - puse que no, ver\r\n                    } else {\r\n                        //Inscripcion\r\n                        fetch('http://localhost:5000/insc-alumno/persona/' + dniAlumno)\r\n                            .then(response => {\r\n                                return response.json().then(data => {\r\n                                    console.log(\"Status Search Persona Alumno\", response.status)\r\n                                    if (response.status === 404) {\r\n                                        throw new NoExistePersona(data.message);\r\n                                    } else if (response.status === 500) {\r\n                                        throw new Error(data.message);\r\n                                    }\r\n                                    return data\r\n                                })\r\n                            }).then(data => {\r\n                                console.log(\"Persona Encontrada \", data)\r\n                                const datos = data.persona;\r\n                                this.setState(function (state) {\r\n                                    const inputs = { ...state.paso0.inputs };\r\n                                    Object.assign(inputs, this.extraeDatosAlumno(state, datos));\r\n                                    return {\r\n                                        paso0: {\r\n                                            ...state.paso0,\r\n                                            inputs,\r\n                                            oidPersona: datos._id,\r\n                                            alumnoCompleto: false,\r\n                                            existeAlumno: false\r\n                                        }\r\n                                    };\r\n                                })\r\n                                //TODO: notif\r\n                            })\r\n                            .catch(error => {\r\n                                if (error instanceof NoExistePersona) {\r\n                                    console.error(\"Alumno - Persona: \", error)\r\n                                    this.setState(state => {\r\n                                        const inputs = { ...state.paso0.inputs };\r\n                                        Object.assign(inputs, this.reiniciarFormulario(state));\r\n                                        return {\r\n                                            paso0: {\r\n                                                ...state.paso0,\r\n                                                inputs,\r\n                                                alumnoCompleto: true,\r\n                                                existeAlumno: false\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                    //TODO: notif\r\n                                } else {\r\n                                    console.log(\"Error Buscar Alumno: \", error)\r\n                                }\r\n                            })\r\n                        console.log(\"Operacion válida, op\", operacion);\r\n                    }\r\n                } else {\r\n                    //TODO: mostrar message con flotante\r\n                    console.log(\"Operacion inválida, message \", message);\r\n                }\r\n                //TODO: controlar multiples clicks? bloquear boton con disable\r\n\r\n            })\r\n            //TODO: flotante error\r\n            .catch((err) => console.error(\"Error: \", err));\r\n    }\r\n\r\n    //TODO: probar\r\n    toggleSpinner() {\r\n        let paso = \"paso\";\r\n        this.setState(state => {\r\n            console.log(state);\r\n            paso = paso + state.pasoActual;\r\n            console.log(paso);\r\n            const spinnerPrevio = state[paso].spinner;\r\n            return {\r\n                [paso]: {\r\n                    ...state[paso],\r\n                    spinner: !spinnerPrevio\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    reiniciarFormulario(state) {\r\n        const pasoActual = \"paso\" + state.pasoActual;\r\n        const clavesFormulario = Object.keys(state[pasoActual].inputs);\r\n        let aux, validoAux, habilitadoAux;\r\n        let valorAux = '';\r\n        let vacio = {};\r\n        clavesFormulario.shift();\r\n\r\n        clavesFormulario.forEach(clave => {\r\n            validoAux = true;\r\n            //Datos en required, al vaciarlos tienen que estar en false\r\n            //TODO: ver msj de error, pq ahora lo mantiene            \r\n            const requeridos = this.state[pasoActual].requeridos;\r\n            if (requeridos.includes(clave)) {\r\n                validoAux = false;\r\n            }\r\n\r\n            if (state.pasoActual === 0) {\r\n                valorAux = clave === 'fechaIngreso' ? this.fechaDefault() : clave === 'tipoDni' ? 'DNI' : '';\r\n            }\r\n            habilitadoAux = clave === \"legajo\" ? false : true;\r\n\r\n            aux = {\r\n                [clave]: {\r\n                    ...state[pasoActual].inputs[clave],\r\n                    valor: valorAux,\r\n                    valido: validoAux,\r\n                    habilitado: habilitadoAux\r\n                }\r\n            }\r\n            Object.assign(vacio, aux);\r\n        })\r\n        return vacio;\r\n    }\r\n\r\n    extraeDatosPersona(state, datosPersona) {\r\n        let persona = {};\r\n        let aux, valorRecibido;\r\n\r\n        const clavesPersonaRec = Object.keys(datosPersona);\r\n        const clavesPersona = [\"dni\", \"nombre\", \"apellido\", \"genero\"];\r\n\r\n        const clavesUtilesPersona = clavesPersona.filter(x => clavesPersonaRec.includes(x));\r\n        //console.log(\"Intersecccion Claves Persona\", clavesUtilesPersona);\r\n\r\n        clavesUtilesPersona.forEach(clave => {\r\n            if (clave.includes(\"fecha\")) {\r\n                valorRecibido = datosPersona[clave].substr(0, 10);\r\n            } else {\r\n                valorRecibido = datosPersona[clave];\r\n            }\r\n            aux = {\r\n                [clave]: {\r\n                    ...state.paso1.inputs[clave],\r\n                    valor: valorRecibido,\r\n                    valido: true\r\n                }\r\n            };\r\n            Object.assign(persona, aux);\r\n        });\r\n\r\n        return persona;\r\n    }\r\n\r\n    extraeDatosResponsable(state, datos) {\r\n        const datosResponsable = datos.responsable;\r\n        const clavesResponsableRec = Object.keys(datosResponsable);\r\n        const clavesFormulario = Object.keys(this.state.paso1.inputs);\r\n\r\n        //Se hace la interseccion de solo las claves que se necesitan                \r\n        const clavesUtilesResponsable = clavesFormulario.filter(x => clavesResponsableRec.includes(x));\r\n        //console.log(\"Intersecccion Claves Responsable\", clavesUtilesResponsable);\r\n\r\n        const inputs = { ...state.paso1.inputs };\r\n        let aux, valorRecibido;\r\n\r\n        Object.assign(inputs, this.reiniciarFormulario(state));\r\n\r\n        Object.assign(inputs, this.extraeDatosPersona(state, datos));\r\n\r\n        clavesUtilesResponsable.forEach(clave => {\r\n            if (datosResponsable[clave] === null) {\r\n                valorRecibido = '';\r\n            } else {\r\n                if (clave.includes(\"fecha\")) {\r\n                    valorRecibido = datosResponsable[clave].substr(0, 10);\r\n                } else {\r\n                    valorRecibido = datosResponsable[clave];\r\n                }\r\n            }\r\n            aux = {\r\n                [clave]: {\r\n                    ...state.paso1.inputs[clave],\r\n                    valor: valorRecibido,\r\n                    valido: true,\r\n                    habilitado: false\r\n                }\r\n            };\r\n            Object.assign(inputs, aux);\r\n        });\r\n\r\n        return inputs;\r\n    }\r\n\r\n    extraeDatosAlumno(state, datos) {\r\n        const clavesRecibidas = Object.keys(datos);\r\n        const clavesFormulario = Object.keys(this.state.paso0.inputs);\r\n\r\n        //Se hace la interseccion de solo las claves que se necesitan        \r\n        const clavesUtiles = clavesFormulario.filter(x => clavesRecibidas.includes(x));\r\n        //console.log(\"Intersecccion Claves\", clavesUtiles);\r\n\r\n        const inputs = { ...state.paso0.inputs };\r\n        let aux, valorRecibido;\r\n\r\n        //Reinicio los datos del formulario        \r\n        Object.assign(inputs, this.reiniciarFormulario(state));\r\n\r\n        //Guardo en el estado los datos recibidos necesarios\r\n        clavesUtiles.forEach(clave => {\r\n            //TODO: para la foto\r\n            if (clave.includes(\"fecha\")) {\r\n                valorRecibido = datos[clave].substr(0, 10);\r\n            } else {\r\n                valorRecibido = datos[clave];\r\n            }\r\n            aux = {\r\n                [clave]: {\r\n                    ...state.paso0.inputs[clave],\r\n                    valor: valorRecibido,\r\n                    valido: true,\r\n                    habilitado: false\r\n                }\r\n            };\r\n            Object.assign(inputs, aux);\r\n        });\r\n        return inputs;\r\n    }\r\n\r\n    pasoSiguiente() {\r\n        if (this.formularioValido()) {\r\n            console.log(\"Formulario Válido\")\r\n            this.setState(function (state) {\r\n                let siguiente = state.pasoActual + 1;\r\n                if (siguiente < state.cantPasos) {\r\n                    return { pasoActual: siguiente }\r\n                } else if (state.pasoActual === state.cantPasos - 1) {\r\n                    //Si es el ultimo paso, define que tiene que registrar los datos\r\n                    console.log(\"Ultimo paso, Finalizar Transacción\")\r\n                }\r\n            });\r\n            return true;\r\n        } else {\r\n            console.log(\"Formulario Inválido\")\r\n            this.setState(state => {\r\n                let paso = \"paso\" + state.pasoActual;\r\n                return {\r\n                    [paso]: {\r\n                        ...state[paso],\r\n                        validar: true\r\n                    }\r\n                }\r\n            })\r\n            return false;\r\n        }\r\n    }\r\n\r\n    pasoPrevio() {\r\n        this.setState(state => {\r\n            let anterior = state.pasoActual - 1;\r\n            if (anterior >= 0) {\r\n                return { pasoActual: anterior }\r\n            }\r\n        });\r\n    }\r\n\r\n    formularioValido() {\r\n        let idPaso = this.state.pasoActual;\r\n        let paso = \"paso\" + idPaso;\r\n        let datosPasoActual = this.state[paso];\r\n        let formValido = false;\r\n        switch (idPaso) {\r\n            case 0:\r\n                let datosAlumno = Object.values(datosPasoActual.inputs);\r\n                //console.log(\"Alumno \", datosPasoActual);\r\n                formValido = datosAlumno.every(campo => {\r\n                    return campo.valido;\r\n                })\r\n                break;\r\n            case 1:\r\n                let datosResponsable = Object.values(datosPasoActual.inputs);\r\n                //console.log(\"Responsable \", datosResponsable);\r\n                formValido = datosResponsable.every(campo => {\r\n                    return campo.valido;\r\n                })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return formValido;\r\n    }\r\n\r\n    fechaDefault() {\r\n        const actual = new Date();\r\n        const fecha = actual.toISOString().substr(0, 10);\r\n        return fecha;\r\n    }\r\n}\r\n\r\nexport default InscribirAlumno;\r\n","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\CompletarFamilia.js",[],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\NotasTrimestrales.js",[],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\AltaCurso.js",[],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Alerts.js",[],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\FormDialogAltaCurso.js",["106"],"import React from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport addRow from './TableDictados'\r\n\r\nexport default function FormDialog({ addRow }) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [profesor, setProfesor] = React.useState('');\r\n    const [materia, setMateria] = React.useState('');\r\n    const [horario, setHorario] = React.useState('');\r\n    const [programa, setPrograma] = React.useState('');\r\n    const [filename, setFileName] = React.useState(\"Subir Programa\");\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        for (const property in dia) {\r\n            if (dia[property]) {\r\n\r\n                addRow(profesor, materia, property, horario, programa)\r\n                break;\r\n            }\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    // START checkbox\r\n    const [dia, setDia] = React.useState({\r\n        lunes: false,\r\n        mates: false,\r\n        miercoles: false,\r\n        jueves: false,\r\n        viernes: false,\r\n    });\r\n\r\n\r\n\r\n    const handleChange = (event) => {\r\n        setDia({ ...dia, [event.target.name]: event.target.checked });\r\n    };\r\n    // END checkbox\r\n\r\n    const shortRoute = (nameFile) => {\r\n        let nameShort = nameFile.substring(12)\r\n        setFileName(nameShort)\r\n        setPrograma(nameShort)        \r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex justify-content-between\">\r\n                <button type=\"button\" className=\"btn btn-primary mr-1 boton\" onClick={handleClickOpen}>Registrar Dictado</button>\r\n            </div>\r\n            <Dialog fullWidth={true} open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle>Registro Dictado Nuevo</DialogTitle>\r\n                <DialogContent>\r\n                    <form className=\"was-validated\">\r\n\r\n                        <div className=\"form-row\">\r\n                            <div className=\"col\">\r\n                                <div className=\"form-group row no-gutters mb-2 align-items-center\">\r\n                                    <label className=\"col-auto px-3 py-1 my-1 mr-3 requerido\" id=\"etiq_anio\" htmlFor=\"dni\">Materia</label>\r\n                                    <div className=\"col col-md-4\">\r\n                                        <input className=\"form-control\" type=\"text\" id=\"anio\" name=\"anio\"\r\n                                            placeholder=\"Nombre Materia\" alt=\"Año del curso\" required\r\n                                            onChange={e => setMateria(e.target.value)}\r\n                                            aria-labelledby=\"etiq_anio\" aria-required=\"true\" />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row\" style={{ \"marginTop\": \"10px\" }}>\r\n                            <div className=\"col\">\r\n                                <div className=\"form-group row no-gutters mb-2 align-items-center\">\r\n                                    <label className=\"col-auto px-3 py-1 my-1 mr-3 requerido\" id=\"etiq_anio\" htmlFor=\"dni\">Seleccione el día</label>\r\n                                </div>\r\n                                <div style={{ \"marginLeft\": \"10px\" }}>\r\n                                    <FormGroup row>\r\n                                        <FormControlLabel\r\n                                            label=\"Lunes\"\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={dia.lunes}\r\n                                                    onChange={handleChange}\r\n                                                    name=\"lunes\"\r\n                                                    color=\"primary\"\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={dia.martes}\r\n                                                    onChange={handleChange}\r\n                                                    name=\"martes\"\r\n                                                    color=\"primary\"\r\n                                                />\r\n                                            }\r\n                                            label=\"Martes\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={dia.miercoles}\r\n                                                    onChange={handleChange}\r\n                                                    name=\"miercoles\"\r\n                                                    color=\"primary\"\r\n                                                />\r\n                                            }\r\n                                            label=\"Miercoles\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={dia.jueves}\r\n                                                    onChange={handleChange}\r\n                                                    name=\"jueves\"\r\n                                                    color=\"primary\"\r\n                                                />\r\n                                            }\r\n                                            label=\"Jueves\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={dia.viernes}\r\n                                                    onChange={handleChange}\r\n                                                    name=\"viernes\"\r\n                                                    color=\"primary\"\r\n                                                />\r\n                                            }\r\n                                            label=\"Viernes\"\r\n                                        />\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-row\">\r\n                            <div className=\"col-sm\">\r\n                                <div className=\"form-group row no-gutters align-items-center\">\r\n                                    <label className=\"col-auto px-3 py-1 my-0 mr-3 requerido\" htmlFor=\"horario\">Seleccionar Horario</label>\r\n                                    <div className=\"col-sm\">\r\n                                        <select name=\"horario\" id=\"horario\" className=\"form-control\" required aria-required=\"true\"\r\n                                            onChange={e => setHorario(e.target.value)}\r\n                                        >\r\n                                            <option value=\"8:00\">8:00</option>\r\n                                            <option value=\"9:00\">9:00</option>\r\n                                            <option value=\"10:00\">10:00</option>\r\n                                            <option value=\"11:00\">11:00</option>\r\n                                            <option value=\"12:00\">12:00</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-row\">\r\n                            <div className=\"col-sm\">\r\n                                <div className=\"form-group row no-gutters align-items-center\">\r\n                                    <label className=\"col-auto px-3 py-1 my-0 mr-3 requerido\" htmlFor=\"profesor\">Seleccionar Profesor</label>\r\n                                    <div className=\"col-sm\">\r\n                                        <select name=\"profesor\" id=\"profesor\" className=\"form-control\" required aria-required=\"true\"\r\n                                            onChange={e => setProfesor(e.target.value)}\r\n                                        >\r\n                                            <option value=\"Rafaela Mazu\">Rafaela Mazu</option>\r\n                                            <option value=\"Gabriela Aranda\">Gabriela Aranda</option>\r\n                                            <option value=\"Andrés Flores\">Andrés Flores</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-row\">\r\n                            <div className=\"col-lg-6 d-flex align-items-center\">\r\n                                <div className=\"form-group row no-gutters mb-2 justify-content-center\">\r\n                                    <div>\r\n                                        <label className=\"custom-file-label\" id=\"etiq_programa\" htmlFor=\"programa\">{filename}</label>\r\n                                    </div>\r\n                                    <div className=\"custom-file\">\r\n                                        <input type=\"file\" className=\"custom-file-input\" id=\"programa\"\r\n                                            aria-describedby=\"etiq_programa\" onChange={e => shortRoute(e.target.value)}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancelar\r\n          </Button>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Aceptar\r\n          </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\TableDictados.js",["107"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nfunction createData(profesor, materia, dia, horario, programa) {\r\n  return { profesor, materia, dia, horario, programa };\r\n}\r\n\r\nconst rows = [\r\n  createData('Quadrini Silvia', 'Matemática', 'Lunes', '8:00', 'prog_Mat2020.pdf'),\r\n  createData('Rodolfo Walsh', 'Lengua y Literatura', 'Lunes', '11:00', 'prog_Len2020.pdf'),\r\n  createData('Lagos Fito', 'Biología', 'Martes', '8:00', 'prog_Mat2020.pdf'),\r\n  createData('Torres Amanda', 'Geografía', 'Miércoles', '10:00', 'prog_Geo2020.pdf'),\r\n  createData('Storani Sergio', 'Física', 'Jueves', '11:00', 'prog_Fis2020.pdf'),\r\n];\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nconst columns = [\r\n  { id: 'profesor', label: 'Profesor', minWidth: 170 },\r\n  { id: 'materia', label: 'Materia', minWidth: 100 },\r\n  {\r\n    id: 'dia',\r\n    label: 'Dia',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n  {\r\n    id: 'horario',\r\n    label: 'Horario',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n  {\r\n    id: 'programa',\r\n    label: 'Programa',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: (value) => value.toFixed(2),\r\n  },\r\n];\r\n\r\n\r\nexport default function StickyHeadTable({ dictado }) {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  if( dictado && dictado.profesor != '' ) {\r\n    rows.push(createData(dictado.profesor, dictado.materia, dictado.dia, dictado.horario, dictado.programa))\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell key={column.id} align={column.align}>\r\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}",["108","109"],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\utils\\Errores.js",[],"C:\\Users\\gasty\\Documents\\GitHub\\sgif_react\\frontend\\src\\components\\Alerta.js",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":5,"column":5,"nodeType":"116","messageId":"117","endLine":7,"endColumn":6},{"ruleId":"110","replacedBy":"118"},{"ruleId":"112","replacedBy":"119"},{"ruleId":"110","replacedBy":"120"},{"ruleId":"112","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":13,"column":8,"nodeType":"124","messageId":"125","endLine":13,"endColumn":14},{"ruleId":"110","replacedBy":"126"},{"ruleId":"112","replacedBy":"127"},{"ruleId":"110","replacedBy":"128"},{"ruleId":"112","replacedBy":"129"},{"ruleId":"110","replacedBy":"130"},{"ruleId":"112","replacedBy":"131"},{"ruleId":"122","severity":1,"message":"132","line":1,"column":17,"nodeType":"124","messageId":"125","endLine":1,"endColumn":26},{"ruleId":"122","severity":1,"message":"133","line":315,"column":28,"nodeType":"124","messageId":"125","endLine":315,"endColumn":32},{"ruleId":"122","severity":1,"message":"134","line":15,"column":8,"nodeType":"124","messageId":"125","endLine":15,"endColumn":14},{"ruleId":"135","severity":1,"message":"136","line":76,"column":35,"nodeType":"137","messageId":"138","endLine":76,"endColumn":37},{"ruleId":"110","replacedBy":"139"},{"ruleId":"112","replacedBy":"140"},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["141"],["142"],["141"],["142"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar",["141"],["142"],["141"],["142"],["141"],["142"],"'Component' is defined but never used.","'type' is assigned a value but never used.","'addRow' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["141"],["142"],"no-global-assign","no-unsafe-negation"]